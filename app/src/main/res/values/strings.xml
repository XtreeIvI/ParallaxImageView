<resources>
    <string name="app_name">ParallaxImageViewExample</string>

    <string name="piv_ok">OK</string>
    <string name="piv_widget">Widget</string>
    <string name="piv_list">List</string>
    <string name="piv_image_grayscale">Grayscale</string>
    <string name="piv_width_px">width px</string>
    <string name="piv_height_px">height px</string>
    <string name="piv_image_range">0 - 1084</string>
    <string name="piv_apply">Apply</string>
    <string name="piv_loaded">Loaded</string>
    <string name="piv_image_blur">Blur</string>
    <string name="piv_info_dialog_title">Parallax Image View Info</string>
    <string name="piv_view_configuration">View Configuration</string>
    <string name="piv_info_dialog_message">"Tap on Image Area - Change Image (switch to Internal Resource, if custom URL was set)\n \nDouble Tap on Image Area - Change Background (Internal Resource)\n \nLong Click on Image Area - Change Scale Type\n \nLong Click on Small Info Icon Near Different Sections - Info About Usage"</string>
    <string name="piv_view_width">View Width</string>
    <string name="piv_px">px</string>
    <string name="piv_view_height">View Height</string>
    <string name="piv_view_padding">View Padding</string>
    <string name="piv_bind_view_width_and_height">Bind View Width and Height</string>
    <string name="piv_parallax_direction">Parallax Direction</string>
    <string name="piv_horizontal">Horizontal</string>
    <string name="piv_vertical">Vertical</string>
    <string name="piv_parallax_horizontal_fraction">Parallax Horizontal Fraction</string>
    <string name="piv_percent">%</string>
    <string name="piv_parallax_vertical_fraction">Parallax Vertical Fraction</string>
    <string name="piv_parallax_tension_fraction">Parallax Tension Fraction</string>
    <string name="piv_absolute_tension">Absolute Tension</string>
    <string name="piv_absolute_parallax_tension">Absolute Parallax Tension</string>
    <string name="piv_parallax_interpolator">Parallax Interpolator</string>
    <string name="piv_other_parallax_settings">Other Parallax Settings</string>
    <string name="piv_force_parallax_by_scale">Force Parallax by Scale</string>
    <string name="piv_center_crop_or_fit_xy">Center Crop or Fit Xy</string>
    <string name="piv_inverse_parallax_directions">Inverse Parallax Directions</string>
    <string name="piv_swap_parallax_directions">Swap Parallax Directions</string>
    <string name="piv_force_recalculations">Force Recalculations</string>
    <string name="piv_view_clip">View Clip</string>
    <string name="piv_view_corner_type">View Corner Type</string>
    <string name="piv_view_corner_size">View Corner Size</string>
    <string name="piv_forced_w_h_corners_equal">Forced W/H Corners Equal</string>
    <string name="piv_prevent_view_corner_overlap">Prevent View Corner Overlap</string>
    <string name="piv_allow_view_corner_width_height_ratio_change">Allow View Corner Width/Height Ratio Change</string>
    <string name="piv_force_view_corner_width_height_equal">Force View Corner Width/Height Equal</string>
    <string name="piv_image_clip">Image Clip</string>
    <string name="piv_image_corner_clip_flag">Image Corner Clip Flag</string>
    <string name="piv_no_corner_flag_selected">No Corner Flag Selected</string>
    <string name="piv_source">Source</string>
    <string name="piv_tension">Tension</string>
    <string name="piv_bound">Bound</string>
    <string name="piv_image_corner_type">Image Corner Type</string>
    <string name="piv_round">Round</string>
    <string name="piv_bevel">Bevel</string>
    <string name="piv_image_corner_size">Image Corner Size</string>
    <string name="piv_prevent_image_corner_overlap">Prevent Image Corner Overlap</string>
    <string name="piv_allow_image_image_width_height_ratio_change">Allow Image Image Width/Height Ratio Change</string>
    <string name="piv_force_image_corner_width_height_equal">Force Image Corner Width/Height Equal</string>
    <string name="piv_background_round_clip">Background Round Clip</string>
    <string name="piv_background_corner_radius">Background Corner Radius</string>
    <string name="piv_custom_image_url_message">For loading dummy images from internet https://picsum.photos/ is used.\n \nThere is few options are available for custom image customization:\n \n– Image – range 0 – 1048 for moment of this sample creation. Each number stands for different image. Whole list of photos you could check via aforementioned link.\n \n– Width and Height – dimension of loaded image in px. Min value is 24dp (depicted in px). Max values in clamped to 1200 px for the purpose of this sample. Experiment with different scale types.\n \n– Grayscale – apply grayscale filter to loaded image.\n \n– Blur – apply blur for loaded image.</string>
    <string name="piv_parallax_direction_message">Direction in which parallax allow to happen. Could be either vertical, horizontal, both or none. If image height (adjusted by scale type) is bigger than view height, but [parallaxDirectionFlag] does not contain [VERTICAL], image will be placed by default to its scale type, even when you explicitly pass different [parallaxVerticalFraction].\n \nNote that if image dimension (adjusted by scale type) is the same as respective view dimension, no parallax can be achieved, despite all flag are properly set.\n \nHowever [isForceParallaxByScale] could be user for such purposes.\n \nDefault value [VERTICAL] and [HORIZONTAL].</string>
    <string name="piv_parallax_vertical_fraction_message">Defines vertical relative offset of parallax.\n \nCan be changed within 0.0 – 1.0 range, and is clamped automatically to its marginal values if exceed.\n \nIf [parallaxDirectionFlag] does not contain [VERTICAL] always return its default value.\n \nAlso return proper for calculation values taking into consideration parameters, such as [isSwapParallaxDirections] and [isParallaxInverseDirection].\n \nDefault value = 0.5.</string>
    <string name="piv_parallax_horizontal_fraction_message">Defines horizontal relative offset of parallax.\n \nCan be changed within 0.0 – 1.0 range, and is clamped automatically to its marginal values if exceed.\n \nIf [parallaxDirectionFlag] does not contain [HORIZONTAL] always return its default value.\n \nAlso return proper for calculation values taking into consideration parameters, such as [isSwapParallaxDirections] and [isParallaxInverseDirection].\n \nDefault value = 0.5.</string>
    <string name="piv_parallax_tension_fraction_message">By default parallax tension allows parallax effect for image in case view and image src aspect ratios differs.\n \nMin value (0.0) stands for no parallax effect.\n \nMax value works differently for different scale type and also differs from image to view sizes.\n \nParallax use difference from image side (adjusted by scale type) and view respective side.\n \nTension itself can decrease this value (e.i. [parallaxTension] = 0.5 - half difference will be used for parallax).If aforementioned difference > 0 and parallax in that direction allowed (refers to "parallax direction" section) that parallax is possible.\n \nIn case image side are lower that view respective side (e.i. small image with [CENTER_INSIDE] scale type) parallax will occur inside view bounds (refers to "force parallax by scale" for other usages).\n \nDefault behavior of this parameter could be overridden by [parallaxAbsoluteTension].\n \nDefault value is 1.0.</string>
    <string name="parallax_absolute_tension_message">Define max parallax tension in px.\n \nThere is positive and negative values possible for this parameter. Value != 0.0 overrides [parallaxTension] default behavior.\n \nIn order to [parallaxTension] takes precedence over this parameter set its value == 0.0\nInstead of using respective side difference (restricted by relative [parallaxTension] percentage) this parameter uses its absolute value.\n \nFor instance, if our difference 100px, our [parallaxTension] = 0.5 (thus tension bounds 50px), and our [parallaxAbsoluteTension] = 20px. In such case 20px is gonna ge used as tension bounds.\n \nHowever if our side difference less that [parallaxAbsoluteTension] value, than lower value is to be used.\n \nFor instance, if our difference 16px, our [parallaxTension] = 0.25 (thus tension bounds 4px), and our [parallaxAbsoluteTension] = 20px. In such case 16px is gonna ge used as tension bounds, because [parallaxAbsoluteTension] overrides [parallaxTension] but clamped to min value by difference.\n \nNegative value of this parameter inverse logic.\n \nFor instance, if difference 100px, [parallaxTension] = 0.25 (thus tension bounds 25px), and [parallaxAbsoluteTension] = -20px. In such case 80px is gonna ge used as tension bounds, because [parallaxAbsoluteTension] overrides [parallaxTension].\n \nIf in this same case [parallaxAbsoluteTension] = -110px - tension bounds would be 0.0, because value is clamped between min and max (in this example 0.0 and 100.0 respectively) (refers to "force parallax by scale" for other usages).\n \nDefault value is 0.</string>
    <string name="piv_parallax_interpolator_message">[TimeInterpolator] ancestor, that can change fraction dispersion and thus visual effect of parallax.\n \nNote, that returned by interpolator values must not exceed 0.0 – 1.0 range. In such case value is clamped to its margin. Thereby interpolators, such as Overshoot or Anticipate, could cause unpredicted and sharp result.\n \nDefault interpolator = [AccelerateDecelerateInterpolator].</string>
    <string name="piv_force_parallax_by_scale_message"><![CDATA[This parameter works only with two scale types: [CENTER_CROP] and [FIT_XY] and allow only outer parallax.\n \nBy default if [parallaxTension] = 1.0 scale image (if needed) to be equal as 2x view dimension.\n \nNote that scaling takes into consideration [parallaxDirectionFlag] flags.\nFor instance, scale type = [CENTER_CROP] modified image is twice as wide as view, image height = view height, [parallaxTension] = 1.0, [parallaxDirectionFlag] = [HORIZONTAL]. In such case no scaling were made, because originally our view is 2x view width.\n \n2. In case [parallaxDirectionFlag] were [VERTICAL] (from previous example), whole image would be scaled by 2x, preserving its aspect ratio.\n \n3. In case scale type = [CENTER_CROP] modified image width = 1.5 view width, image height == view height, [parallaxTension] = 1.0, [parallaxDirectionFlag] = [HORIZONTAL].\nIn this scenario image would to be scaled by only 1.5, because initially image is wider.\n \nIf [parallaxAbsoluteTension] not equal 0 and takes precedence over [parallaxTension] two next scenarios are possible:\n \n- [parallaxAbsoluteTension] > 0.0 - scale image (if needed), so that scaled image exceeds view bounds by specified value from each side. Note that if resulting scale bigger that 2x view dimension it will be clamped to latter.\n \n- [parallaxAbsoluteTension] < 0.0F - virtually apply max scale (2x view dimension) and subtract specified value.\n \nDefault value = false.]]></string>
    <string name="piv_inverse_direction_message">Reverse direction of parallax.\n \nBy default, in case of [parallaxDirectionFlag] contains [VERTICAL] flag and [parallaxTension] = 0.0 top of image is visible in the view (in case image dimension bigger than view dimension) or image is at a top of the view (in case image dimension lower than view dimension).\n \nIf this parameter set to true, reversed behavior replace default behavior.\n \nTechnically if [isParallaxInverseDirection] set to true reversed [parallaxVerticalFraction] and [parallaxHorizontalFraction] obtained during parallax calculation. (e.i. 0.2 + inverse direction = 0.8)\n \nDefault value = false.</string>
    <string name="piv_swap_parallax_direction_message">Defined whether parallax direction should be swapped (e.i. setting horizontal parallax will move image vertically).\n \nNote that proper original direction that receive fraction must be allowed.\n \nFor example, if image is to move horizontally when scrolling up/down, then [ParallaxDirectionFlag.VERTICAL] must be present in [parallaxDirectionFlag].\n \nDefault value = false.</string>
    <string name="piv_force_recalculation_message">This parameter force to recalculate its params each draw frame.\n \nNote that if set to true with conjunction with many clip flags performance could be decreased from 2.5 to 6 times, especially in lists.</string>
    <string name="piv_view_corner_clip_type_message">There is two corner types are possible for view - ROUND and BEVEL.\n \nKeep in mind that this parameter corner clip overall view - background and image\n \nDefault value = [ROUND].</string>
    <string name="piv_view_corner_clip_size_message">Defines view corner size in px.\n \nView corner size clip both background and image.\n \nIf [viewCornerType] = [ROUND], that this parameter specifies view corner radius, if [viewCornerType] = [BEVEL] - specifies size from corner between which bevel is clipped.\n \nSee also: prevent view corner overlaps, allow w/h ration change and force w/h ration equal for more possibilities.\n \nDefault value is 0.</string>
    <string name="piv_view_prevent_overlap_message">Parameter that can allow/disallow overall view clip corner overlap.\n \nDefault value is true.</string>
    <string name="piv_view_allow_wh_change_message">This parameter work only in conjunction with [isPreventViewCornerOverlap] and when latter value is true.\n \nIn case wh ratio is 1.0 (view height and width are the same) it takes no effect. Otherwise when [viewCornerSize] is bigger that half of min view side that bigger side will be cut util wh ratio becomes 1.0. Note that is such case [viewCornerSize] could be max of min view side.\n \nDefault values is 0.</string>
    <string name="piv_view_force_wh_equal_message">This parameter takes precedence over [isPreventViewCornerOverlap] parameter and [isViewCornerWhRatioChangeEnabled], making view down crop with specified [viewCornerType] until width/height ratio = 1. Note that clipped width/height does not change view bounds (e.i. clipping only visual, preserving original view dimensions).\n \nDefault value = false.</string>
    <string name="piv_image_corner_clip_flag_message">Define image corner clip flag. In simple words, what bounds of image (and only image) should be clipped.\n \nCan be used as flags, e.i combine different [ImageCornerClipFlag].\n \nThe following clipping flags are possible:\n \n- SOURCE - Clip source image. If image is bigger that view\'s respective dimensions you may not observe clipped corners, otherwise you\'ll always see clipped image.\n \n- TENSION - Clip tension flag used to clip image around max tension bounds. In case [parallaxTension] = 1.0 and image is bigger that view this flag has the same effect as [SOURCE].\n \n- BOUND - Specifies clipping area around view (padded) bounds.\n \nDefault value = [SOURCE] and [BOUND].</string>
    <string name="piv_image_corner_clip_type_message">There is two corner types are possible for image - ROUND and BEVEL.\n \nDefault value = [ROUND].</string>
    <string name="piv_image_corner_clip_size_message">Defines image corner size in px, that will be clipped.\n \nNote that only image itself is clipped, allowing you treat background differently.\n \n- [imageCornerType] = [ROUND] - specifies image corner radius;\n \n[imageCornerType] = [CornerType.BEVEL], specifies size from corner between which bevel is clipped.\n \nDefault value is 0.</string>
    <string name="piv_image_prevent_overlap_message">Parameter that can allow/disallow image clip corner overlap.\n \nDefault value is true.</string>
    <string name="piv_image_allow_wh_change_message">This parameter work only in conjunction with [isPreventImageCornerOverlap] and when latter value is true.\n \nIn case wh ratio is 1.0 (image height and width are the same) it takes no effect. Otherwise when [imageCornerSize] is bigger that half of min image side than bigger side will be cut util wh ratio becomes 1.0.\n \nNote that is such case [imageCornerSize] could be max of min image side.\n \nDefault value is false.</string>
    <string name="piv_image_force_wh_equal_message">This parameter takes precedence over [isPreventImageCornerOverlap] parameter and [isImageCornerWhRatioChangeEnabled], making image down crop with specified [imageCornerType] until width/height ratio = 1.\n \nNote that clipped width/height does not affect calculated tension bounds. (e.i. clipping only visual, preserving original image dimensions).\n \nDefault values = false.</string>
    <string name="piv_background_corner_message">Defines background corner radius.\n \nHowever this is optional parameter, and can only be used for simple backgrounds, such as [BitmapDrawable], because it replace its content to [RoundedBitmapDrawable].\n \nSuits well for only simple background (color drawable, bitmap drawable and not for ripple drawable and such).\n \nDefault value = 0.</string>
    <string name="piv_custom_image_url">Custom Image URL</string>
</resources>
